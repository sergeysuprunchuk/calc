package calc

import (
	"reflect"
	"testing"
)

func Test_Calc(t *testing.T) {
	tests := []struct {
		program  string
		expected any
	}{
		{"2 + 5", 7.},
		{"3 - 4", -1.},
		{"8 * 2", 16.},
		{"16 / 4", 4.},
		{"9 ** 2", 81.},
		{"(2 + 3) * 5", 25.},
		{"4 - 2.25", 1.75},
		{"27 / 3", 9.},
		{"10 + 8", 18.},
		{"5 * 3.09", 15.45},
		{"64 - 16", 48.},
		{"2 ** 3", 8.},
		{"(9 + 5) / 2", 7.},
		{"25 * 4", 100.},
		{"81 / 9", 9.},
		{"3 + 2.50", 5.5},
		{"15 - 5", 10.},
		{"8 ** 2", 64.},
		{"4 * (3 + 2)", 20.},
		{"32 / 8", 4.},
		{"5 + 9", 14.},
		{"2.25 * 4", 9.},
		{"16 - 3", 13.},
		{"10 ** 2", 100.},
		{"(5 * 2) + 3", 13.},
		{"27 + 9", 36.},
		{"4 / 2", 2.},
		{"8 + 5.25", 13.25},
		{"3 * 16", 48.},
		{"64 / 2", 32.},
		{"9 - 2.09", 6.91},
		{"25 + 5", 30.},
		{"2 * (8 + 4)", 24.},
		{"81 ** 2", 6561.},
		{"15 / 3", 5.},
		{"5 - 2", 3.},
		{"4 + 3.50", 7.5},
		{"32 * 2", 64.},
		{"10 - 8", 2.},
		{"3 ** 3", 27.},
		{"(9 * 2) - 5", 13.},
		{"16 + 4", 20.},
		{"2 / 2", 1.},
		{"8 * 3.25", 26.},
		{"27 - 9", 18.},
		{"5 + 2.09", 7.09},
		{"64 + 16", 80.},
		{"4 ** 2", 16.},
		{"25 / 5", 5.},
		{"(3 + 5) * 2", 16.},
		{"9 + 8", 17.},
		{"2 - 0.25", 1.75},
		{"81 / 3", 27.},
		{"10 * 4", 40.},
		{"5 ** 2", 25.},
		{"32 - 8", 24.},
		{"(16 + 2) / 3", 6.},
		{"3 * 5.50", 16.5},
		{"4 + 9", 13.},
		{"8 - 2.09", 5.91},
		{"27 / 9", 3.},
		{"2 + 15", 17.},
		{"64 * 2", 128.},
		{"5 + 3.25", 8.25},
		{"9 ** 3", 729.},
		{"(4 * 5) - 2", 18.},
		{"16 / 8", 2.},
		{"25 + 3", 28.},
		{"2 * 2.50", 5.},
		{"81 - 27", 54.},
		{"10 / 2", 5.},
		{"3 + 8", 11.},
		{"32 + 4", 36.},
		{"5 * (2 + 3)", 25.},
		{"8 ** 3", 512.},
		{"4 - 0.09", 3.91},
		{"9 + 5.25", 14.25},
		{"16 * 2", 32.},
		{"27 - 3", 24.},
		{"2 + 2.09", 4.09},
		{"64 / 4", 16.},
		{"5 + 10", 15.},
		{"3 * 4", 12.},
		{"25 ** 2", 625.},
		{"(8 + 2) * 3", 30.},
		{"81 / 9", 9.},
		{"4 + 2.50", 6.5},
		{"32 - 16", 16.},
		{"5 / 2", 2.5},
		{"9 * 3.25", 29.25},
		{"2 + 27", 29.},
		{"16 ** 2", 256.},
		{"10 - 5", 5.},
		{"3 + 0.25", 3.25},
		{"8 * 4", 32.},
		{"64 + 9", 73.},
		{"5 - 2.09", 2.91},
		{"25 / 5", 5.},
		{"2 * (3 + 4)", 14.},
		{"81 + 3", 84.},
		{"4 ** 3", 64.},
		{"9 - 2.50", 6.5},
		{"32 / 8", 4.},
		{"5 + 8", 13.},
		{"16 + 2.25", 18.25},
		{"27 * 3", 81.},
		{"2 - 0.09", 1.91},
		{"10 * 2", 20.},
		{"3 ** 2", 9.},
		{"64 - 4", 60.},
		{"(5 + 3) / 2", 4.},
		{"8 + 5.50", 13.5},
		{"25 + 9", 34.},
		{"4 * 2.09", 8.36},
		{"81 / 3", 27.},
		{"2 + 16", 18.},
		{"5 - 3", 2.},
		{"32 * 4", 128.},
		{"9 + 2.25", 11.25},
		{"27 / 9", 3.},
		{"10 ** 3", 1000.},
		{"3 * (8 + 2)", 30.},
		{"16 - 5", 11.},
		{"4 + 0.25", 4.25},
		{"64 / 2", 32.},
		{"5 + 2.50", 7.5},
		{"8 * 3", 24.},
		{"25 - 9", 16.},
		{"2 ** 4", 16.},
		{"81 + 5", 86.},
		{"3 - 0.09", 2.91},
		{"32 / 4", 8.},
		{"9 * 2", 18.},
		{"16 + 8", 24.},
		{"5 + 3.25", 8.25},
		{"27 ** 2", 729.},
		{"(4 + 2) * 5", 30.},
		{"10 - 2", 8.},
		{"64 * 3", 192.},
		{"2 + 5.50", 7.5},
		{"8 / 4", 2.},
		{"25 + 4", 29.},
		{"3 * 2.09", 6.27},
		{"81 - 9", 72.},
		{"5 ** 3", 125.},
		{"16 / 2", 8.},
		{"4 + 9", 13.},
		{"32 - 2", 30.},
		{"2 * 3.25", 6.5},
		{"27 + 5", 32.},
		{"10 + 2.50", 12.5},
		{"8 ** 2", 64.},
		{"9 / 3", 3.},
		{"64 + 3", 67.},
		{"5 - 0.25", 4.75},
		{"25 * 2", 50.},
		{"3 + 8", 11.},
		{"16 - 4", 12.},
		{"2 + 2.09", 4.09},
		{"81 / 27", 3.},
		{"4 * 5", 20.},
		{"32 + 9", 41.},
		{"5 + 2.25", 7.25},
		{"8 * (3 + 2)", 40.},
		{"27 - 8", 19.},
		{"10 ** 2", 100.},
		{"3 - 2.50", 0.5},
		{"64 / 8", 8.},
		{"9 + 4", 13.},
		{"2 * 5", 10.},
		{"25 / 5", 5.},
		{"4 + 3.09", 7.09},
		{"16 ** 3", 4096.},
		{"5 + 8", 13.},
		{"32 - 3", 29.},
		{"2 + 0.25", 2.25},
		{"81 * 2", 162.},
		{"3 / 3", 1.},
		{"8 + 2.50", 10.5},
		{"27 + 4", 31.},
		{"10 - 5", 5.},
		{"64 * 2", 128.},
		{"5 ** 2", 25.},
		{"9 - 2.09", 6.91},
		{"25 + 3", 28.},
		{"4 * (2 + 5)", 28.},
		{"16 / 4", 4.},
		{"2 + 9", 11.},
		{"32 + 2.25", 34.25},
		{"3 * 5.50", 16.5},
		{"8 - 3", 5.},
		{"81 / 9", 9.},
		{"5 + 2.09", 7.09},
		{"-2 + 5", 3.},
		{"-3 * 4", -12.},
		{"-8 / 2", -4.},
		{"-16 + 3.25", -12.75},
		{"-9 ** 2", -81.},
		{"-(-5 + 2)", 3.},
		{"-4 - 2.09", -6.09},
		{"-27 / 3", -9.},
		{"-10 * 8", -80.},
		{"-32 + 5.50", -26.5},
		{"-2 ** 3", -8.},
		{"-(-9 + 4)", 5.},
		{"-25 / 5", -5.},
		{"-3 * 2.25", -6.75},
		{"-64 - 16", -80.},
		{"-8 + 3", -5.},
		{"-5 ** 2", -25.},
		{"-16 / 4", -4.},
		{"-9 * (-2)", 18.},
		{"-81 + 5", -76.},
		{"-4 - 0.25", -4.25},
		{"-27 / 9", -3.},
		{"-10 + 2.09", -7.91},
		{"-3 * 8", -24.},
		{"-32 ** 2", -1024.},
		{"-(-5 + 3)", 2.},
		{"-2 + 9", 7.},
		{"-8 * 4.50", -36.},
		{"-64 / 2", -32.},
		{"-25 - 3", -28.},
		{"-9 + 2.25", -6.75},
		{"-16 * (-2)", 32.},
		{"-5 / 1", -5.},
		{"-3 ** 3", -27.},
		{"-81 - 4", -85.},
		{"-2 + 5.50", 3.5},
		{"-10 * 3", -30.},
		{"-27 + 8", -19.},
		{"-4 ** 2", -16.},
		{"-32 / 8", -4.},
		{"-9 - 2.09", -11.09},
		{"-5 * (-3)", 15.},
		{"-16 + 4", -12.},
		{"-8 / 2", -4.},
		{"-3 + 2.25", -0.75},
		{"-64 * 2", -128.},
		{"-25 ** 2", -625.},
		{"-(-9 + 5)", 4.},
		{"-2 - 0.09", -2.09},
		{"-81 / 3", -27.},
		{"(2 + 3) * 5 - 4", 21.},
		{"8 * (2 + 3.25) / 2", 21.},
		{"-9 ** 2 + 5", -76.},
		{"(16 - 4) / 3 * 2", 8.},
		{"5 * (3 + 2.09) - 8", 17.45},
		{"64 / (2 + 3) + 1", 13.8},
		{"-4 + 9 * 2.25", 16.25},
		{"27 / (3 - 1) * 5", 67.5},
		{"10 + (8 - 3) * 2", 20.},
		{"-32 * 2 / 5 + 4", -8.8},
		{"2 ** 3 + 5 - 1", 12.},
		{"(9 + 4) / 2 * 3", 19.5},
		{"-25 * (2 - 0.25)", -43.75},
		{"3 * 8 + 5.50 - 2", 27.5},
		{"-64 / (4 + 4) * 2", -16.},
		{"8 + (5 - 2) * 3", 17.},
		{"-5 ** 2 + 9 / 3", -22.},
		{"(16 + 2) * 3 - 4", 50.},
		{"-9 * (2 + 0.09) + 5", -13.809999999999999},
		{"81 / (3 * 3) + 2", 11.},
		{"-4 + 2.50 * 5 - 1", 7.5},
		{"27 - (9 / 3) * 2", 21.},
		{"-10 + 8 * 2.25", 8.},
		{"3 ** 2 + 5 * 2", 19.},
		{"-32 / 4 + 8 - 2", -2.},
		{"(5 + 3) * 2 - 0.25", 15.75},
		{"-8 * (4 + 1) / 5", -8.},
		{"64 + (3 - 1) * 2", 68.},
		{"-9 + 5.25 * 2 - 3", -1.5},
		{"(16 / 2) * 3 + 1", 25.},
		{"-2 ** 3 + 9 - 4", -3.},
		{"25 * (2 + 0.50) - 5", 57.5},
		{"-3 + (8 / 2) * 4", 13.},
		{"81 - 9 * 2 + 3", 66.},
		{"-4 ** 2 + 5 * 2", -6.},
		{"(32 / 8) + 3 * 2", 10.},
		{"-5 * (2 + 2.09) - 1", -21.45},
		{"16 + 4 * (3 - 1)", 24.},
		{"-8 / 2 + 5 ** 2", 21.},
		{"-9 + (3 * 2.25) - 1", -3.25},
		{"64 * (2 - 1) + 3", 67.},
		{"-25 / 5 + 4 * 2", 3.},
		{"(3 + 2) * 5 - 0.09", 24.91},
		{"-2 * (8 + 4) / 3", -8.},
		{"81 / (9 - 3) + 5", 18.5},
		{"-10 * 2 + 3 ** 2", -11.},
		{"4 + (5 * 2) - 3.25", 10.75},
		{"-32 + 8 * (2 + 1)", -8.},
		{"(9 / 3) * 2 + 5", 11.},
		{"-5 ** 2 + 16 / 4", -21.},
		{"(2 + 3) * (5 - 1) * 2", 40.},
		{"-8 * 2 + 3 ** 2 - 1", -8.},
		{"64 / (4 + 4) * 3 + 2", 26.},
		{"-9 + (5 * 2.50) - 3", 0.5},
		{"(16 - 2) / 2 * 5 - 1", 34.},
		{"-4 * (3 + 2.09) + 8", -12.36},
		{"27 + (9 / 3) * 2 - 4", 29.},
		{"-10 ** 2 + 5 * 3", -85.},
		{"(32 + 8) / 4 * 2", 20.},
		{"-3 * (5 + 2.25) - 1", -22.75},
		{"81 - (9 * 2) + 3.50", 66.5},
		{"-2 + 4 * 5 - 0.09", 17.91},
		{"(8 + 2) * 3 / 2 + 1", 16.},
		{"-64 / (8 - 4) * 2", -32.},
		{"5 * (3 ** 2) - 8 + 2", 39.},
		{"-16 + 4 * (2 + 0.25)", -7.},
		{"9 * (2 - 0.50) + 3", 16.5},
		{"-25 / 5 + 8 * 2 - 1", 10.},
		{"(3 + 5) * 2 - 4 ** 2", 0.},
		{"-4 * (8 / 2) + 5.25", -10.75},
		{"32 + (9 - 3) * 2 / 1", 44.},
		{"-2 ** 3 + 5 * 3 - 2", 5.},
		{"(81 / 9) - 2 * 2.09", 4.82},
		{"-10 + (4 + 3) * 2", 4.},
		{"64 * (2 - 1) + 5 - 0.25", 68.75},
		{"-8 / (2 + 2) * 3 + 1", -5.},
		{"(5 * 3) + 2 ** 2 - 4", 15.},
		{"-9 * (2 + 0.09) + 3 * 2", -12.809999999999999},
		{"27 / (3 * 1) + 5 - 2", 12.},
		{"-4 + 8 * 2.50 - 3", 13.},
		{"(16 + 4) / 2 * 3 - 1", 29.},
		{"-32 * (2 - 0.50) + 4", -44.},
		{"3 ** 2 + (5 * 2) - 0.09", 18.91},
		{"-64 / 4 + 8 * 2 - 3", -3.},
		{"(9 + 3) * 2 / 1 + 5", 29.},
		{"-5 * (2 + 2.25) - 8 + 1", -28.25},
		{"25 + (4 * 2) - 3 ** 2", 24.},
		{"-2 * (8 + 4) / 2 + 5", -7.},
		{"81 / (9 - 3) * 2 + 1", 28.},
		{"-10 + 3 * 5 - 2.50", 2.5},
		{"(4 + 2) * 3 - 8 / 2", 14.},
		{"-16 ** 2 + 5 * 3 - 4", -245.},
		{"64 / (2 + 2) + 3 * 2", 22.},
		{"-9 * (5 - 2) + 4 ** 2", -11.},
		{"(32 - 8) / 3 * 2 + 1", 17.},
		{"-5 + (2 * 3.25) - 8", -6.5},
		{"27 + 9 * (2 - 0.25) - 3", 39.75},
		{"-4 ** 2 + 5 * (2 + 1)", -1.},
		{"-2 ** 3 ** 2", -512.},
		{"-(-3 ** 2) ** 2", -81.},
		{"-5 ** 2 ** 2", -625.},
		{"-(-9 ** 2) ** 2", -6561.},
		{"-4 ** 3 ** 2", -262144.},
		{"-8 ** 2 ** 2", -4096.},
		{"-(-16 ** 2) ** 2", -65536.},
		{"-25 ** 2 ** 2", -390625.},
		{"-(-10 ** 2) ** 3", 1000000.},
		{"-3 ** 3 ** 2", -19683.},
		{"-(-2 ** 4) ** 2", -256.},
		{"-64 ** 2 ** 2", -16777216.},
		{"-(-5 ** 3) ** 2", -15625.},
		{"-9 ** 2 ** 3", -43046721.},
		{"-(-4 ** 2) ** 3", 4096.},
		{"-27 ** 2 ** 2", -531441.},
		{"-(-8 ** 3) ** 2", -262144.},
		{"-2.25 ** 2 ** 2", -25.62890625},
		{"-(-3.09 ** 2) ** 2", -91.16621361},
		{"-5.50 ** 2 ** 2", -915.0625},
		{"-(-16 ** 3) ** 2", -16777216.},
		{"-10 ** 3 ** 2", -1000000000.},
		{"-(-2 ** 2) ** 3", 64.},
		{"-81 ** 2 ** 2", -43046721.},
		{"-(-4 ** 3) ** 2", -4096.},
		{"-((2 ** 2) * 3 + 5)", -17.},
		{"-(3 ** 2 / (4 - 1))", -3.},
		{"-((5 * 2) ** 2 - 8)", -92.},
		{"-(9 ** 2 / (3 + 2.25))", -15.428571428571429},
		{"-((4 + 8) * 2 ** 2)", -48.},
		{"-((-8 ** 2) + 5 * 3)", 49.},
		{"-((16 / 4) ** 2 - 2.09)", -13.91},
		{"-((-25 * 2) ** 2 / 5)", -500.},
		{"-((10 ** 2 - 3) * 2)", -194.},
		{"-((-3 ** 3) + 4 / 2)", 25.},
		{"-((2 ** 2 * 5) - 0.25)", -19.75},
		{"-((-64 / 8) ** 2 + 3)", -67.},
		{"-((5 ** 2 - 2) * 2.50)", -57.5},
		{"-((-9 * 3) ** 2 / 4)", -182.25},
		{"-((4 ** 2 + 5) - 2.09)", -18.91},
		{"-((-27 / 3) * 2 ** 2)", 36.},
		{"-((8 ** 2 - 4) / 2.25)", -26.666666666666668},
		{"-((-2.25 ** 2) + 3 * 5)", -9.9375},
		{"-((3.09 * 2) ** 2 - 4)", -34.1924},
		{"-((-5.50 + 3) * 2 ** 2)", 10.},
		{"-((16 ** 2 / 8) - 5)", -27.},
		{"-((-10 * 2) ** 2 + 3.25)", -403.25},
		{"-((2 ** 3 - 1) * 4)", -28.},
		{"-((-81 / 9) ** 2 + 2)", -83.},
		{"-((4 ** 2 * 3) - 5.50)", -42.5},
		{"-((2 ** 3) / (4 - 3.75) * 5)", -160.},
		{"-(3 ** (2 + 1) / (9 - 8.75))", -108.},
		{"-((5 * 2) ** 2 - (16 / 4))", -96.},
		{"-(9 ** 2 / (3 + 2.25) * (-2))", 30.857142857142858},
		{"-((4 + 8) * (2 ** 2) / 3.09)", -15.533980582524272},
		{"-((-8 ** 2) + (5 * 3) - 0.25)", 49.25},
		{"-((16 / (4 + 4)) ** 3 * 2)", -16.},
		{"-((-25 * 2) ** 2 / (5 + 5))", -250.},
		{"-((10 ** 2 - 3) * (2 ** 1))", -194.},
		{"-((-3 ** 3) + (4 / 2.25) * 5)", 18.11111111111111},
		{"-((2 ** 2 * 5) - (8 / 2.09))", -16.17224880382775},
		{"-((-64 / 8) ** 2 + (3 * 2))", -70.},
		{"-((5 ** 2 - 2) * (2.50 ** 1))", -57.5},
		{"-((-9 * 3) ** 2 / (4 + 0.09))", -178.239608801956},
		{"-((4 ** 2 + 5) - (2.09 * 3))", -14.73},
		{"-((-27 / 3) * (2 ** 2) + 1)", 35.},
		{"-((8 ** 2 - 4) / (2.25 + 0.25))", -24.},
		{"-((-2.25 ** 2) + (3 * 5) - 2)", -7.9375},
		{"-((3.09 * 2) ** 2 - (4 ** 2))", -22.1924},
		{"-((-5.50 + 3) * (2 ** 2) / 1)", 10.},
		{"-((16 ** 2 / 8) - (5 * 2.25))", -20.75},
		{"-((-10 * 2) ** 2 + (3.25 - 1))", -402.25},
		{"-((2 ** 3 - 1) * (4 / 2))", -14.},
		{"-((-81 / 9) ** 2 + (2 * 2))", -85.},
		{"-((4 ** 2 * 3) - (5.50 / 2))", -45.25},
		{"-(2 ** (3 + 1) / (5 - 4.75) * 3)", -192.},
		{"-((8 * (2 ** 2)) / (9 - 8.91))", -355.5555555555561},
		{"-((-3 ** 2) + (16 / (4 + 0.25)))", 5.235294117647059},
		{"-((5 ** 2 - 2) * (3.25 / 2))", -37.375},
		{"-((64 / (8 - 4)) ** 2 - 3)", -253.},
		{"-((-9 ** 2) / (2 + 0.50) * 2)", 64.8},
		{"-((4 + 5) * (2 ** 2) - 2.09)", -33.91},
		{"-((-27 / (3 + 0.25)) * (2 ** 2))", 33.23076923076923},
		{"-((8 ** 2 - 5) / (2.25 * 2))", -13.11111111111111},
		{"-((-2 ** 3) + (3 * 5.50) - 4)", -4.5},
		{"-((16 / 2) ** 2 - (4 ** 2) + 1)", -49.},
		{"-((-10 ** 2) / (5 - 2.75) * 2)", 88.88888888888889},
		{"-((3 ** 2 * 2) - (8 / 2.09))", -14.17224880382775},
		{"-((-64 / 8) ** 2 + (3 ** 2))", -73.},
		{"-((5 ** 2 - 1) * (2.50 - 0.25))", -54.},
		{"-((-9 * 3) ** 2 / (4 ** 2))", -45.5625},
		{"-((4 ** 2 + 3) - (2.25 * 2))", -14.5},
		{"-((-27 / 3) * (2 ** 3) / 2)", 36.},
		{"-((8 ** 2 - 4) / (3.09 - 1))", -28.70813397129187},
		{"-((-2.25 ** 2) + (5 * 3) - 0.09)", -9.8475},
		{"-((3.09 * 2) ** 2 - (5 ** 2))", -13.1924},
		{"-((-5.50 + 2) * (2 ** 3) / 4)", 7.},
		{"-((16 ** 2 / 4) - (3 * 2.25))", -57.25},
		{"-((-10 * 2) ** 2 + (5 - 1.75))", -403.25},
		{"-((2 ** 4 - 2) * (4 / 2.25))", -24.888888888888886},
		{"-((-81 / 9) ** 2 + (3 ** 2))", -90.},
		{"-((4 ** 3 * 2) - (5.50 / 1))", -122.5},
		{"-(2 ** (2 + 2) / (3 + 2.75))", -2.782608695652174},
		{"-((8 * (3 ** 2)) / (5 - 4.91))", -800.0000000000013},
		{"-((-16 ** 2) + (4 / 0.25) * 2)", 224.},
		{"-((5 ** 2 - 3) * (2.09 / 1))", -45.98},
		{"-((64 / (4 + 4)) ** 3 - 2)", -510.},
		{"-((-9 ** 2) / (3 + 0.09) * 2)", 52.42718446601942},
		{"-((4 + 3) * (2 ** 3) - 5)", -51.},
		{"-((-27 / (3 + 0.50)) * (2 ** 2))", 30.857142857142858},
		{"-((8 ** 2 - 3) / (2.25 * 3))", -9.037037037037036},
		{"-((-2 ** 3) + (5 * 2.50) - 3)", -1.5},
		{"-((16 / 2) ** 3 - (4 ** 2) + 2)", -498.},
		{"-((-10 ** 2) / (5 - 2.25) * 3)", 109.0909090909091},
		{"-((3 ** 2 * 3) - (8 / 2.25))", -23.444444444444443},
		{"-((-64 / 4) ** 2 + (3 ** 3))", -283.},
		{"-((5 ** 2 - 2) * (2.50 - 0.09))", -55.43000000000001},
		{"-((-9 * 2) ** 2 / (4 ** 2))", -20.25},
		{"-((4 ** 2 + 2) - (3.09 * 2))", -11.82},
		{"-((-27 / 3) * (2 ** 4) / 5)", 28.8},
		{"-((8 ** 2 - 5) / (2.25 + 0.50))", -21.454545454545453},
		{"-((-2.25 ** 2) + (3 * 5) - 0.25)", -9.6875},
		{"-((3.09 * 3) ** 2 - (5 ** 2))", -60.93289999999999},
		{"-((-5.50 + 3) * (2 ** 4) / 8)", 5.},
		{"-((16 ** 2 / 2) - (3 * 2.09))", -121.73},
		{"-((-10 * 3) ** 2 + (5 - 1.25))", -903.75},
		{"-((2 ** 4 - 1) * (4 / 2.50))", -24.},
		{"-((-81 / 3) ** 2 + (3 ** 2))", -738.},
		{"-((4 ** 3 * 3) - (5.50 / 2))", -189.25},
		{"-(2 ** (3 + 2) / (5 - 4.50))", -64.},
		{"-((8 * (3 ** 2)) / (9 - 8.75))", -288.},
		{"-((-16 ** 2) + (4 / 0.09) * 3)", 122.66666666666669},
		{"-((5 ** 2 - 4) * (2.25 / 1))", -47.25},
		{"-((64 / (8 - 4)) ** 3 - 3)", -4093.},
		{"-((-9 ** 2) / (2 + 0.25) * 4)", 144.},
		{"-((4 + 2) * (2 ** 4) - 5)", -91.},
		{"-((-27 / (3 + 0.25)) * (2 ** 3))", 66.46153846153847},
		{"-((8 ** 2 - 2) / (3.09 * 2))", -10.032362459546926},
		{"-((-2 ** 4) + (5 * 2.50) - 4)", 7.5},
		{"-((16 / 2) ** 3 - (4 ** 3) + 1)", -449.},
		{"-((-10 ** 2) / (5 - 2.09) * 2)", 68.72852233676976},
		{"-((3 ** 2 * 4) - (8 / 2.25))", -32.44444444444444},
		{"-((-64 / 4) ** 2 + (3 ** 4))", -337.},
		{"-((5 ** 2 - 1) * (2.50 - 0.25))", -54.},
		{"-((-9 * 2) ** 2 / (4 ** 3))", -5.0625},
		{"-((4 ** 2 + 1) - (3.09 * 3))", -7.73},
		{"-((2 ** 2 * 5) / (3 + 2.25))", -3.8095238095238093},
		{"-((-9 ** 2 + 4) / (2 - 0.09))", 40.31413612565445},
		{"-((16 / 4) ** 2 - (5 * 2.50))", -3.5},
		{"-((-3 ** 3) * (2 + 1) / 4)", 20.25},
		{"-((8 ** 2 - 3) / (2.09 + 1))", -19.741100323624597},
		{"-((64 / (8 - 4)) ** 2 + 2.25)", -258.25},
		{"-((-5 ** 2) + (4 * 3) / 2)", 19.},
		{"-((27 / (3 + 0.50)) * (2 ** 2))", -30.857142857142858},
		{"-((-10 * 2) ** 2 / (5 - 1.25))", -106.66666666666667},
		{"-((4 ** 3 - 2) * (3 / 2.09))", -88.9952153110048},
		{"-((-81 / 9) ** 2 + (5 * 0.25))", -82.25},
		{"-((2 ** 4 / 2) - (3 ** 2) + 1)", -0.},
		{"-((-8 * 2.25) ** 2 / (4 + 0.09))", -79.21760391198045},
		{"(2 ** 2 + 3 ** 2) < 5 ** 2", true},
		{"-(7 ** 2) <= 2 ** 4", true},
		{"(5 ** 2 * 3 ** 1) / 2 ** 2 > 3 ** 2", true},
		{"-(2 ** 2) ** 3 == 5 ** 3", false},
		{"7 ** 3 - 3 ** 3 * 2 ** 1 >= 2 ** 5", true},
		{"(3 ** 4 / 3 ** 2) != 3 ** 2", false},
		{"-5 ** 2 * (2 ** 3 - 7 ** 1) < 2 ** 4", true},
		{"(2 ** 1 + 5 ** 1) ** 3 == 7 ** 3", true},
		{"3 ** 5 / (2 ** 2 * 5 ** 1) <= 2 ** 3", false},
		{"-(7 ** 2 + 2 ** 3) * 2 ** 2 > 3 ** 4", false},
		{"5 ** 3 - 3 ** 3 * 2 ** 2 >= 2 ** 4", true},
		{"(2 ** 4) ** 2 / 7 ** 2 != 5 ** 1", true},
		{"-3 ** 2 * (5 ** 2 - 2 ** 4) < 2 ** 5", true},
		{"(3 ** 1 + 7 ** 1) ** 2 - 2 ** 5 == 3 ** 3", false},
		{"2 ** 3 ** 2 <= 5 ** 3", false},
		{"-(5 ** 2 * 3 ** 2) / 2 ** 3 >= 7 ** 1", false},
		{"(7 ** 2 - 2 ** 3) * (3 ** 2 + 5 ** 1) > 5 ** 3", true},
		{"3 ** 5 - 7 ** 3 != 2 ** 2", true},
		{"-(2 ** 4 * 5 ** 1) / (3 ** 2 - 7 ** 1) <= -2 ** 4", true},
		{"((2 ** 2 + 5 ** 2) * 3 ** 1) ** 2 >= 7 ** 4", true},
		{"2 ** 3 + 3 ** 2 < 5 ** 2 * 2 ** 1", true},
		{"-3 ** 3 * 2 ** 2 == 7 ** 3", false},
		{"(2 ** 2 + 3 ** 2) / 2 ** 1 >= 5 ** 2 - 7 ** 2", true},
		{"-(5 ** 2) ** 2 + 3 ** 4 != 2 ** 6", true},
		{"(7 ** 2 / 2 ** 3) * 3 ** 1 < 2 ** 4", false},
		{"(2 ** 5 - 3 ** 3) * (5 ** 1 + 2 ** 1) <= 3 ** 4", true},
		{"-2 ** 2 ** 2 + 7 ** 2 == 3 ** 3", false},
		{"(3 ** 2 * 5 ** 2) / (2 ** 3 - 7 ** 1) > 2 ** 5", true},
		{"-(2 ** 1 + 3 ** 1) ** 3 >= 5 ** 3", false},
		{"(7 ** 2 - 2 ** 4) * (3 ** 3 / 3 ** 1) == 5 ** 3", false},
		{"(2 ** 2 + 3 ** 2) < 5 ** 2 == (1 == 1)", true},
		{"(2 ** 2 + 3 ** 2) < 5 ** 2 == (1 != 1)", false},
		{"(2 ** 2 + 3 ** 2) < 5 ** 2 != (1 == 1)", false},
		{"(2 ** 2 + 3 ** 2) < 5 ** 2 != (1 != 1)", true},
		{"(2 ** 2 + 3 ** 2 < 5 ** 2) && (7 ** 2 > 2 ** 4)", true},
		{"(5 ** 2 * 3 ** 1 / 2 ** 2 <= 3 ** 2) || -(2 ** 2) ** 3 == 5 ** 3", false},
		{"7 ** 3 - 3 ** 3 * 2 ** 1 >= 2 ** 5 && (3 ** 4 / 3 ** 2 != 3 ** 2)", false},
		{"-5 ** 2 * (2 ** 3 - 7 ** 1) < 2 ** 4 || (2 ** 1 + 5 ** 1) ** 3 == 7 ** 3", true},
		{"3 ** 5 / (2 ** 2 * 5 ** 1) <= 2 ** 3 && -(7 ** 2 + 2 ** 3) * 2 ** 2 > 3 ** 4", false},
		{"(5 ** 3 - 3 ** 3 * 2 ** 2 >= 2 ** 4) || (2 ** 4) ** 2 / 7 ** 2 != 5 ** 1", true},
		{"-3 ** 2 * (5 ** 2 - 2 ** 4) < 2 ** 5 && (3 ** 1 + 7 ** 1) ** 2 - 2 ** 5 == 3 ** 3", false},
		{"(2 ** 3 ** 2 <= 5 ** 3) || -(5 ** 2 * 3 ** 2) / 2 ** 3 >= 7 ** 1", false},
		{"(7 ** 2 - 2 ** 3) * (3 ** 2 + 5 ** 1) > 5 ** 3 && 3 ** 5 - 7 ** 3 != 2 ** 2", true},
		{"-(2 ** 4 * 5 ** 1) / (3 ** 2 - 7 ** 1) <= -2 ** 4 || ((2 ** 2 + 5 ** 2) * 3 ** 1) ** 2 >= 7 ** 4", true},
		{"(2 ** 3 + 3 ** 2 < 5 ** 2 * 2 ** 1) && -3 ** 3 * 2 ** 2 == 7 ** 3", false},
		{"(2 ** 2 + 3 ** 2) / 2 ** 1 >= 5 ** 2 - 7 ** 2 || -(5 ** 2) ** 2 + 3 ** 4 != 2 ** 6", true},
		{"(7 ** 2 / 2 ** 3) * 3 ** 1 < 2 ** 4 && (2 ** 5 - 3 ** 3) * (5 ** 1 + 2 ** 1) <= 3 ** 4", false},
		{"-2 ** 2 ** 2 + 7 ** 2 == 3 ** 3 || (3 ** 2 * 5 ** 2) / (2 ** 3 - 7 ** 1) > 2 ** 5", true},
		{"-(2 ** 1 + 3 ** 1) ** 3 >= 5 ** 3 && (7 ** 2 - 2 ** 4) * (3 ** 3 / 3 ** 1) == 5 ** 3", false},
		{"(5 ** 2 + 2 ** 3 < 3 ** 3) || (7 ** 2 - 2 ** 4 != 3 ** 2)", true},
		{"(2 ** 4 / 2 ** 2 > 3 ** 1) && (-5 ** 2 * 2 ** 2 <= 7 ** 2)", true},
		{"(3 ** 3 - 2 ** 3 == 5 ** 2) || (2 ** 2 * 3 ** 2 >= 7 ** 2)", false},
		{"-(3 ** 2 + 2 ** 2) * 5 ** 1 < 2 ** 5 && (5 ** 3 / 5 ** 1 != 5 ** 2)", false},
		{"(7 ** 3 - 3 ** 4 >= 2 ** 6) || (2 ** 3 + 5 ** 2 > 3 ** 3)", true},
		{"(2 ** 2 ** 3 <= 7 ** 2) && (3 ** 2 * 2 ** 1 == 5 ** 2 - 7 ** 1)", false},
		{"-(5 ** 2 - 2 ** 3) * 3 ** 1 >= 2 ** 4 || (7 ** 2 / 2 ** 2 != 3 ** 2)", true},
		{"(3 ** 4 / 3 ** 2 < 5 ** 2) && (2 ** 3 - 3 ** 2 <= 2 ** 1)", true},
		{"(2 ** 5 * 3 ** 1 > 7 ** 3) || (-2 ** 3 ** 2 == 3 ** 4)", false},
		{"(5 ** 2 + 3 ** 2 != 2 ** 5) && (7 ** 2 - 2 ** 4 >= 3 ** 3)", true},
		{"-(2 ** 3 * 5 ** 1) / 2 ** 2 < 3 ** 2 || (3 ** 3 + 2 ** 2 == 7 ** 2)", true},
		{"(7 ** 2 * 2 ** 1 <= 5 ** 3) && (3 ** 2 - 2 ** 2 != 5 ** 1)", false},
		{"(2 ** 4 - 3 ** 3 >= 2 ** 2) || (-5 ** 2 * 3 ** 1 > 7 ** 2)", false},
		{"(3 ** 5 / 3 ** 3 == 3 ** 2) && (2 ** 3 + 5 ** 2 < 7 ** 2)", true},
		{"-(2 ** 2 + 3 ** 2) * 2 ** 2 <= 5 ** 3 || (7 ** 3 - 2 ** 5 != 3 ** 4)", true},
		{"(5 ** 2 * 2 ** 2 > 3 ** 3) && (2 ** 3 ** 2 >= 7 ** 3)", true},
		{"(3 ** 2 + 2 ** 3 != 5 ** 2) || (-7 ** 2 * 2 ** 1 < 3 ** 4)", true},
		{"(2 ** 4 / 2 ** 2 <= 3 ** 2) && (5 ** 3 - 3 ** 3 == 2 ** 5)", false},
		{"-(3 ** 2 * 2 ** 2) > 7 ** 2 || (2 ** 3 + 5 ** 1 >= 3 ** 2)", true},
		{"(7 ** 2 - 2 ** 4 < 5 ** 2) && (3 ** 4 / 3 ** 2 != 3 ** 3)", false},
		{"(2 ** 5 * 3 ** 1 >= 7 ** 3) || (-2 ** 2 ** 3 <= 3 ** 3)", true},
		{"(5 ** 2 + 3 ** 2 == 2 ** 5) && (7 ** 2 - 2 ** 3 > 3 ** 2)", false},
		{"-(2 ** 3 * 5 ** 1) / 2 ** 2 != 3 ** 2 || (3 ** 3 + 2 ** 2 <= 7 ** 2)", true},
		{"(7 ** 2 * 2 ** 1 > 5 ** 3) && (3 ** 2 - 2 ** 2 == 5 ** 1)", false},
		{"(2 ** 4 - 3 ** 3 <= 2 ** 2) || (-5 ** 2 * 3 ** 1 >= 7 ** 2)", true},
		{"(3 ** 5 / 3 ** 3 != 3 ** 2) && (2 ** 3 + 5 ** 2 >= 7 ** 2)", false},
		{"-(2 ** 2 + 3 ** 2) * 2 ** 2 > 5 ** 3 || (7 ** 3 - 2 ** 5 == 3 ** 4)", false},
		{"(5 ** 2 * 2 ** 2 <= 3 ** 3) && (2 ** 3 ** 2 < 7 ** 3)", false},
		{"(3 ** 2 + 2 ** 3 == 5 ** 2) || (-7 ** 2 * 2 ** 1 != 3 ** 4)", true},
		{"(2 ** 4 / 2 ** 2 >= 3 ** 2) && (5 ** 3 - 3 ** 3 != 2 ** 5)", false},
		{"-(3 ** 2 * 2 ** 2) < 7 ** 2 || (2 ** 3 + 5 ** 1 <= 3 ** 2)", true},
		{"(7 ** 2 - 2 ** 4 != 5 ** 2) && (3 ** 4 / 3 ** 2 == 3 ** 3)", false},
		{"(2 ** 5 * 3 ** 1 < 7 ** 3) || (-2 ** 2 ** 3 >= 3 ** 3)", true},
		{"(5 ** 2 + 3 ** 2 != 2 ** 5) && (7 ** 2 - 2 ** 3 <= 3 ** 2)", false},
		{"-(2 ** 3 * 5 ** 1) / 2 ** 2 == 3 ** 2 || (3 ** 3 + 2 ** 2 >= 7 ** 2)", false},
		{"(7 ** 2 * 2 ** 1 <= 5 ** 3) && (3 ** 2 - 2 ** 2 != 5 ** 1)", false},
		{"(2 ** 4 - 3 ** 3 >= 2 ** 2) || (-5 ** 2 * 3 ** 1 > 7 ** 2)", false},
		{"(3 ** 5 / 3 ** 3 == 3 ** 2) && (2 ** 3 + 5 ** 2 < 7 ** 2)", true},
		{"-(2 ** 2 + 3 ** 2) * 2 ** 2 <= 5 ** 3 || (7 ** 3 - 2 ** 5 != 3 ** 4)", true},
		{"(5 ** 2 * 2 ** 2 > 3 ** 3) && (2 ** 3 ** 2 >= 7 ** 3)", true},
		{"(3 ** 2 + 2 ** 3 != 5 ** 2) || (-7 ** 2 * 2 ** 1 < 3 ** 4)", true},
		{"(2 ** 4 / 2 ** 2 <= 3 ** 2) && (5 ** 3 - 3 ** 3 == 2 ** 5)", false},
		{"-(3 ** 2 * 2 ** 2) > 7 ** 2 || (2 ** 3 + 5 ** 1 >= 3 ** 2)", true},
		{"(7 ** 2 - 2 ** 4 < 5 ** 2) && (3 ** 4 / 3 ** 2 != 3 ** 3)", false},
		{"(2 ** 5 * 3 ** 1 >= 7 ** 3) || (-2 ** 2 ** 3 <= 3 ** 3)", true},
		{"(5 ** 2 + 3 ** 2 == 2 ** 5) && (7 ** 2 - 2 ** 3 > 3 ** 2)", false},
		{"-(2 ** 3 * 5 ** 1) / 2 ** 2 != 3 ** 2 || (3 ** 3 + 2 ** 2 <= 7 ** 2)", true},
		{"(7 ** 2 * 2 ** 1 > 5 ** 3) && (3 ** 2 - 2 ** 2 == 5 ** 1)", false},
		{"(2 ** 4 - 3 ** 3 <= 2 ** 2) || (-5 ** 2 * 3 ** 1 >= 7 ** 2)", true},
		{"(3 ** 5 / 3 ** 3 != 3 ** 2) && (2 ** 3 + 5 ** 2 >= 7 ** 2)", false},
		{"-(2 ** 2 + 3 ** 2) * 2 ** 2 > 5 ** 3 || (7 ** 3 - 2 ** 5 == 3 ** 4)", false},
		{"(5 ** 2 * 2 ** 2 <= 3 ** 3) && (2 ** 3 ** 2 < 7 ** 3)", false},
		{"(3 ** 2 + 2 ** 3 == 5 ** 2) || (-7 ** 2 * 2 ** 1 != 3 ** 4)", true},
		{"(2 ** 4 / 2 ** 2 >= 3 ** 2) && (5 ** 3 - 3 ** 3 != 2 ** 5)", false},
		{"-(3 ** 2 * 2 ** 2) < 7 ** 2 || (2 ** 3 + 5 ** 1 <= 3 ** 2)", true},
		{"(7 ** 2 - 2 ** 4 != 5 ** 2) && (3 ** 4 / 3 ** 2 == 3 ** 3)", false},
		{"(2 ** 5 * 3 ** 1 < 7 ** 3) || (-2 ** 2 ** 3 >= 3 ** 3)", true},
		{"(5 ** 2 + 3 ** 2 != 2 ** 5) && (7 ** 2 - 2 ** 3 <= 3 ** 2)", false},
		{"-(2 ** 3 * 5 ** 1) / 2 ** 2 == 3 ** 2 || (3 ** 3 + 2 ** 2 >= 7 ** 2)", false},
		{"(7 ** 2 * 2 ** 1 <= 5 ** 3) && (3 ** 2 - 2 ** 2 != 5 ** 1)", false},
		{"(2 ** 4 - 3 ** 3 >= 2 ** 2) || (-5 ** 2 * 3 ** 1 > 7 ** 2)", false},
		{"(3 ** 5 / 3 ** 3 == 3 ** 2) && (2 ** 3 + 5 ** 2 < 7 ** 2)", true},
		{"-(2 ** 2 + 3 ** 2) * 2 ** 2 <= 5 ** 3 || (7 ** 3 - 2 ** 5 != 3 ** 4)", true},
		{"(5 ** 2 * 2 ** 2 > 3 ** 3) && (2 ** 3 ** 2 >= 7 ** 3)", true},
		{"(3 ** 2 + 2 ** 3 != 5 ** 2) || (-7 ** 2 * 2 ** 1 < 3 ** 4)", true},
		{"(2 ** 4 / 2 ** 2 <= 3 ** 2) && (5 ** 3 - 3 ** 3 == 2 ** 5)", false},
		{"-(3 ** 2 * 2 ** 2) > 7 ** 2 || (2 ** 3 + 5 ** 1 >= 3 ** 2)", true},
		{"(7 ** 2 - 2 ** 4 < 5 ** 2) && (3 ** 4 / 3 ** 2 != 3 ** 3)", false},
		{"(2 ** 5 * 3 ** 1 >= 7 ** 3) || (-2 ** 2 ** 3 <= 3 ** 3)", true},
		{"(5 ** 2 + 3 ** 2 == 2 ** 5) && (7 ** 2 - 2 ** 3 > 3 ** 2)", false},
		{"-(2 ** 3 * 5 ** 1) / 2 ** 2 != 3 ** 2 || (3 ** 3 + 2 ** 2 <= 7 ** 2)", true},
		{"(7 ** 2 * 2 ** 1 > 5 ** 3) && (3 ** 2 - 2 ** 2 == 5 ** 1)", false},
		{"(2 ** 4 - 3 ** 3 <= 2 ** 2) || (-5 ** 2 * 3 ** 1 >= 7 ** 2)", true},
		{"(3 ** 5 / 3 ** 3 != 3 ** 2) && (2 ** 3 + 5 ** 2 >= 7 ** 2)", false},
		{"-(2 ** 2 + 3 ** 2) * 2 ** 2 > 5 ** 3 || (7 ** 3 - 2 ** 5 == 3 ** 4)", false},
		{"2 * 3 < 5 + 2 && 7 == 11", false},
		{"-3 * 2 <= 13 || 5 != 7", true},
		{"5 + 3 > 2 * 7 && 11 == 3", false},
		{"-7 < 2 + 13 || 3 >= 5", true},
		{"2 + 3 != 11 && 7 <= 13", true},
		{"-5 * 2 == 3 || 2 != 7", true},
		{"3 * 2 >= 5 && 11 < 13", true},
		{"-2 + 7 > 3 || 5 == 11", true},
		{"7 - 3 != 2 && 13 >= 5", true},
		{"-3 * 5 < 7 || 11 == 2", true},
		{"2 + 5 <= 13 && 3 != 7 && 11 > 5", true},
		{"-7 * 2 == 3 || 5 >= 11 || 13 < 2", false},
		{"3 + 2 > 7 && 11 != 5 && -2 <= 3", false},
		{"-5 * 3 < 13 || 7 == 2 || -11 >= 3", true},
		{"2 * 7 >= 5 && 3 != 11 && -13 < 5", true},
		{"-3 + 2 == 7 || 5 <= 11 && 2 > 3", false},
		{"7 - 2 != 3 && 11 >= 5 || -5 * 2 < 13", true},
		{"-2 * 3 > 7 || 3 == 11 && 13 != 5", false},
		{"5 + 3 <= 7 && 2 != 11 || -3 >= 5", false},
		{"-7 * 2 < 3 || 11 == 5 && 2 <= 13", true},
		{"2 + 3 != 7 && -5 * 2 > 11 || 3 == 13", false},
		{"3 * 2 >= 5 || -7 < 11 && 13 != 2", true},
		{"-5 + 7 == 3 && 2 <= 11 || -3 * 2 > 5", false},
		{"7 - 3 != 5 || 11 >= 2 && -2 == 13", true},
		{"-2 * 5 < 3 || 7 == 11 && 3 != 5", true},
		{"2 + 7 <= 13 && -3 * 2 > 5 || 11 == 7", false},
		{"3 - 2 == 5 || -5 != 7 && 13 >= 2", true},
		{"-7 * 3 < 11 || 2 <= 5 && -3 == 13", true},
		{"5 + 2 >= 7 && 11 != 3 || -2 * 3 < 5", true},
		{"-3 + 5 > 2 || 7 == 13 && 11 <= 5", false},
		{"2 * 3 != 7 && -5 < 11 || 3 >= 13", true},
		{"-7 + 2 <= 3 || 11 == 5 && -2 * 3 > 7", true},
		{"3 * 5 >= 7 && 2 != 13 || -11 < 5", true},
		{"-5 * 2 == 3 || 7 <= 11 && 3 != 2", true},
		{"2 + 3 < 7 && -11 >= 5 || 13 == 7", false},
		{"-3 * 7 > 5 || 2 != 11 && -5 <= 3", true},
		{"7 - 2 == 3 && 11 < 13 || -3 * 2 >= 5", false},
		{"-2 + 5 != 7 || 3 == 11 && -13 < 2", true},
		{"5 * 3 <= 7 && -2 > 11 || 7 != 3", true},
		{"-7 * 2 < 5 || 11 >= 3 && -2 == 13", true},
		{"2 + 3 != 5 && 7 <= 11 || -3 * 2 > 13", false},
		{"3 - 2 == 7 || -5 != 11 && 13 >= 2", true},
		{"-5 * 3 < 7 || 2 == 11 && -3 <= 5", true},
		{"7 + 2 >= 5 && 11 != 13 || -2 * 3 < 7", true},
		{"-3 + 7 > 2 || 5 == 11 && 13 != 3", true},
		{"2 * 5 <= 7 && -3 >= 11 || 7 < 5", false},
		{"-7 * 3 == 5 || 2 != 13 && -11 <= 3", true},
		{"3 + 2 != 7 && 11 >= 5 || -5 * 2 < 13", true},
		{"-2 * 3 > 7 || 3 == 11 && 13 != 5", false},
		{"5 - 3 <= 2 && -7 < 11 || 2 != 13", true},
		{"-3 * 5 >= 7 && 11 == 3 || -2 * 3 < 5", true},
		{"2 * 3 < 7 && 5 == 11 || -13 > 3 && 7 != 2", false},
		{"-3 * 5 <= 11 || 7 != 2 && 13 < 5 || 11 == 3", true},
		{"5 + 2 > 3 && 11 == 7 || -2 != 13 && 3 >= 5", false},
		{"7 - 3 >= 5 || 2 <= 11 && -3 * 2 < 7 || 13 != 5", true},
		{"-2 * 7 == 3 && 13 != 5 || 11 > 2 && -3 <= 7", true},
		{"3 * 2 != 7 || -5 >= 11 && 2 < 13 || 7 == 11", true},
		{"-11 + 5 < 3 && 7 == 2 || -3 <= 5 && 13 != 2", true},
		{"2 * 13 > 7 || 3 != 11 && -5 == 7 || 11 >= 3", true},
		{"5 - 3 <= 2 && -2 * 3 >= 7 || 11 != 3 && 7 < 5", false},
		{"-7 * 2 == 5 || 11 < 13 && -3 > 2 || 5 != 13", true},
		{"2 * 3 < 7 && 5 + 1 == 11 && -13 >= 3 || 7 != 2", true},
		{"3 - 5 <= 11 || 7 * 2 != 13 && 11 == 3 || -2 < 5", true},
		{"-5 * 2 > 7 && 11 - 3 != 7 && 3 * 2 == 13 || 5 >= 2", true},
		{"7 + 2 != 5 || 2 * 3 < 11 && -3 == 5 || 13 <= 7", true},
		{"-3 * 7 == 2 && 5 + 3 >= 11 && -11 != 2 || 7 < 13", true},
		{"1 == 1 && 1 != 1", false},
		{"1 == 1 && 1 == 1", true},
		{"1 == 1 || 1 != 1", true},
		{"1 != 1 || 1 == 1", true},
		{"1 != 1 || 1 != 1 || 1 == 1", true},
		{"1 == 1 && (1 != 1 || 1 == 1)", true},
		{"1 == 1 && (1 != 1 && 1 == 1)", false},
		{"1 == 1 || (1 != 1 && 1 == 1)", true},
		{"5 > 3 ? 16 : 9", 16.},
		{"0 > 16 ? 25 : 9 > 5 ? 15 : 2", 15.},
		{"20 >= 27 ? 81 : 8 >= 4 ? 2 : 3", 2.},
		{"16 > 9 ? 32 : (8 > 3 ? (25 >= 15 ? 4 : 81) : (27 < 64 ? (5 > 2 ? 20 : 2) : 3))", 32.},
	}

	for _, test := range tests {
		val := Calc(test.program)

		if !reflect.DeepEqual(val, test.expected) {
			t.Errorf("%s: got %v, want %v", test.program, val, test.expected)
		}
	}
}
